// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/fireyun/gorm-gen-demo/gendemo/dal/model"
)

func newTemplateSets(db *gorm.DB, opts ...gen.DOOption) templateSets {
	_templateSets := templateSets{}

	_templateSets.templateSetsDo.UseDB(db, opts...)
	_templateSets.templateSetsDo.UseModel(&model.TemplateSets{})

	tableName := _templateSets.templateSetsDo.TableName()
	_templateSets.ALL = field.NewAsterisk(tableName)
	_templateSets.ID = field.NewUint32(tableName, "id")
	_templateSets.Name = field.NewString(tableName, "name")
	_templateSets.Memo = field.NewString(tableName, "memo")
	_templateSets.TemplateIDs = field.NewField(tableName, "template_ids")
	_templateSets.Public = field.NewBool(tableName, "public")
	_templateSets.BoundApps = field.NewField(tableName, "bound_apps")
	_templateSets.BizID = field.NewUint32(tableName, "biz_id")
	_templateSets.TemplateSpaceID = field.NewUint32(tableName, "template_space_id")
	_templateSets.Creator = field.NewString(tableName, "creator")
	_templateSets.Reviser = field.NewString(tableName, "reviser")
	_templateSets.CreatedAt = field.NewTime(tableName, "created_at")
	_templateSets.UpdatedAt = field.NewTime(tableName, "updated_at")

	_templateSets.fillFieldMap()

	return _templateSets
}

type templateSets struct {
	templateSetsDo templateSetsDo

	ALL             field.Asterisk
	ID              field.Uint32
	Name            field.String
	Memo            field.String
	TemplateIDs     field.Field
	Public          field.Bool
	BoundApps       field.Field
	BizID           field.Uint32
	TemplateSpaceID field.Uint32
	Creator         field.String
	Reviser         field.String
	CreatedAt       field.Time
	UpdatedAt       field.Time

	fieldMap map[string]field.Expr
}

func (t templateSets) Table(newTableName string) *templateSets {
	t.templateSetsDo.UseTable(newTableName)
	return t.updateTableName(newTableName)
}

func (t templateSets) As(alias string) *templateSets {
	t.templateSetsDo.DO = *(t.templateSetsDo.As(alias).(*gen.DO))
	return t.updateTableName(alias)
}

func (t *templateSets) updateTableName(table string) *templateSets {
	t.ALL = field.NewAsterisk(table)
	t.ID = field.NewUint32(table, "id")
	t.Name = field.NewString(table, "name")
	t.Memo = field.NewString(table, "memo")
	t.TemplateIDs = field.NewField(table, "template_ids")
	t.Public = field.NewBool(table, "public")
	t.BoundApps = field.NewField(table, "bound_apps")
	t.BizID = field.NewUint32(table, "biz_id")
	t.TemplateSpaceID = field.NewUint32(table, "template_space_id")
	t.Creator = field.NewString(table, "creator")
	t.Reviser = field.NewString(table, "reviser")
	t.CreatedAt = field.NewTime(table, "created_at")
	t.UpdatedAt = field.NewTime(table, "updated_at")

	t.fillFieldMap()

	return t
}

func (t *templateSets) WithContext(ctx context.Context) *templateSetsDo {
	return t.templateSetsDo.WithContext(ctx)
}

func (t templateSets) TableName() string { return t.templateSetsDo.TableName() }

func (t templateSets) Alias() string { return t.templateSetsDo.Alias() }

func (t *templateSets) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := t.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (t *templateSets) fillFieldMap() {
	t.fieldMap = make(map[string]field.Expr, 12)
	t.fieldMap["id"] = t.ID
	t.fieldMap["name"] = t.Name
	t.fieldMap["memo"] = t.Memo
	t.fieldMap["template_ids"] = t.TemplateIDs
	t.fieldMap["public"] = t.Public
	t.fieldMap["bound_apps"] = t.BoundApps
	t.fieldMap["biz_id"] = t.BizID
	t.fieldMap["template_space_id"] = t.TemplateSpaceID
	t.fieldMap["creator"] = t.Creator
	t.fieldMap["reviser"] = t.Reviser
	t.fieldMap["created_at"] = t.CreatedAt
	t.fieldMap["updated_at"] = t.UpdatedAt
}

func (t templateSets) clone(db *gorm.DB) templateSets {
	t.templateSetsDo.ReplaceConnPool(db.Statement.ConnPool)
	return t
}

func (t templateSets) replaceDB(db *gorm.DB) templateSets {
	t.templateSetsDo.ReplaceDB(db)
	return t
}

type templateSetsDo struct{ gen.DO }

func (t templateSetsDo) Debug() *templateSetsDo {
	return t.withDO(t.DO.Debug())
}

func (t templateSetsDo) WithContext(ctx context.Context) *templateSetsDo {
	return t.withDO(t.DO.WithContext(ctx))
}

func (t templateSetsDo) ReadDB() *templateSetsDo {
	return t.Clauses(dbresolver.Read)
}

func (t templateSetsDo) WriteDB() *templateSetsDo {
	return t.Clauses(dbresolver.Write)
}

func (t templateSetsDo) Session(config *gorm.Session) *templateSetsDo {
	return t.withDO(t.DO.Session(config))
}

func (t templateSetsDo) Clauses(conds ...clause.Expression) *templateSetsDo {
	return t.withDO(t.DO.Clauses(conds...))
}

func (t templateSetsDo) Returning(value interface{}, columns ...string) *templateSetsDo {
	return t.withDO(t.DO.Returning(value, columns...))
}

func (t templateSetsDo) Not(conds ...gen.Condition) *templateSetsDo {
	return t.withDO(t.DO.Not(conds...))
}

func (t templateSetsDo) Or(conds ...gen.Condition) *templateSetsDo {
	return t.withDO(t.DO.Or(conds...))
}

func (t templateSetsDo) Select(conds ...field.Expr) *templateSetsDo {
	return t.withDO(t.DO.Select(conds...))
}

func (t templateSetsDo) Where(conds ...gen.Condition) *templateSetsDo {
	return t.withDO(t.DO.Where(conds...))
}

func (t templateSetsDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *templateSetsDo {
	return t.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (t templateSetsDo) Order(conds ...field.Expr) *templateSetsDo {
	return t.withDO(t.DO.Order(conds...))
}

func (t templateSetsDo) Distinct(cols ...field.Expr) *templateSetsDo {
	return t.withDO(t.DO.Distinct(cols...))
}

func (t templateSetsDo) Omit(cols ...field.Expr) *templateSetsDo {
	return t.withDO(t.DO.Omit(cols...))
}

func (t templateSetsDo) Join(table schema.Tabler, on ...field.Expr) *templateSetsDo {
	return t.withDO(t.DO.Join(table, on...))
}

func (t templateSetsDo) LeftJoin(table schema.Tabler, on ...field.Expr) *templateSetsDo {
	return t.withDO(t.DO.LeftJoin(table, on...))
}

func (t templateSetsDo) RightJoin(table schema.Tabler, on ...field.Expr) *templateSetsDo {
	return t.withDO(t.DO.RightJoin(table, on...))
}

func (t templateSetsDo) Group(cols ...field.Expr) *templateSetsDo {
	return t.withDO(t.DO.Group(cols...))
}

func (t templateSetsDo) Having(conds ...gen.Condition) *templateSetsDo {
	return t.withDO(t.DO.Having(conds...))
}

func (t templateSetsDo) Limit(limit int) *templateSetsDo {
	return t.withDO(t.DO.Limit(limit))
}

func (t templateSetsDo) Offset(offset int) *templateSetsDo {
	return t.withDO(t.DO.Offset(offset))
}

func (t templateSetsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *templateSetsDo {
	return t.withDO(t.DO.Scopes(funcs...))
}

func (t templateSetsDo) Unscoped() *templateSetsDo {
	return t.withDO(t.DO.Unscoped())
}

func (t templateSetsDo) Create(values ...*model.TemplateSets) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Create(values)
}

func (t templateSetsDo) CreateInBatches(values []*model.TemplateSets, batchSize int) error {
	return t.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (t templateSetsDo) Save(values ...*model.TemplateSets) error {
	if len(values) == 0 {
		return nil
	}
	return t.DO.Save(values)
}

func (t templateSetsDo) First() (*model.TemplateSets, error) {
	if result, err := t.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.TemplateSets), nil
	}
}

func (t templateSetsDo) Take() (*model.TemplateSets, error) {
	if result, err := t.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.TemplateSets), nil
	}
}

func (t templateSetsDo) Last() (*model.TemplateSets, error) {
	if result, err := t.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.TemplateSets), nil
	}
}

func (t templateSetsDo) Find() ([]*model.TemplateSets, error) {
	result, err := t.DO.Find()
	return result.([]*model.TemplateSets), err
}

func (t templateSetsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.TemplateSets, err error) {
	buf := make([]*model.TemplateSets, 0, batchSize)
	err = t.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (t templateSetsDo) FindInBatches(result *[]*model.TemplateSets, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return t.DO.FindInBatches(result, batchSize, fc)
}

func (t templateSetsDo) Attrs(attrs ...field.AssignExpr) *templateSetsDo {
	return t.withDO(t.DO.Attrs(attrs...))
}

func (t templateSetsDo) Assign(attrs ...field.AssignExpr) *templateSetsDo {
	return t.withDO(t.DO.Assign(attrs...))
}

func (t templateSetsDo) Joins(fields ...field.RelationField) *templateSetsDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Joins(_f))
	}
	return &t
}

func (t templateSetsDo) Preload(fields ...field.RelationField) *templateSetsDo {
	for _, _f := range fields {
		t = *t.withDO(t.DO.Preload(_f))
	}
	return &t
}

func (t templateSetsDo) FirstOrInit() (*model.TemplateSets, error) {
	if result, err := t.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.TemplateSets), nil
	}
}

func (t templateSetsDo) FirstOrCreate() (*model.TemplateSets, error) {
	if result, err := t.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.TemplateSets), nil
	}
}

func (t templateSetsDo) FindByPage(offset int, limit int) (result []*model.TemplateSets, count int64, err error) {
	result, err = t.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = t.Offset(-1).Limit(-1).Count()
	return
}

func (t templateSetsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = t.Count()
	if err != nil {
		return
	}

	err = t.Offset(offset).Limit(limit).Scan(result)
	return
}

func (t templateSetsDo) Scan(result interface{}) (err error) {
	return t.DO.Scan(result)
}

func (t templateSetsDo) Delete(models ...*model.TemplateSets) (result gen.ResultInfo, err error) {
	return t.DO.Delete(models)
}

func (t *templateSetsDo) withDO(do gen.Dao) *templateSetsDo {
	t.DO = *do.(*gen.DO)
	return t
}
